version: '3.8'

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "${FRONTEND_PORT}:3000"
    environment:
      - REACT_APP_BACKEND_URL=http://localhost:8000
    volumes:
      - ./frontend/src:/app/src
      - ./storage:/app/storage
    depends_on:
      - backend
    networks:
      - rag-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "${BACKEND_PORT}:8000"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - PGVECTOR_HOST=${PGVECTOR_HOST}
      - PGVECTOR_PORT=${PGVECTOR_PORT}
      - PGVECTOR_DB=${PGVECTOR_DB}
      - NEO4J_HOST=${NEO4J_HOST}
      - NEO4J_PORT=${NEO4J_PORT}
      - NEO4J_AUTH=${NEO4J_AUTH}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_MODEL=${OPENAI_MODEL}
      - OPENAI_EMBEDDING_MODEL=${OPENAI_EMBEDDING_MODEL}
      - CHUNK_SIZE=${CHUNK_SIZE}
      - CHUNK_OVERLAP=${CHUNK_OVERLAP}
      - TOP_K_RESULTS=${TOP_K_RESULTS}
      - STORAGE_PATH=${STORAGE_PATH}
    volumes:
      - ./backend/app:/app/app
      - ./storage:/app/storage
    depends_on:
      - postgres
      - pgvector
      - neo4j
    networks:
      - rag-network

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5434:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./storage:/app/storage
    networks:
      - rag-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgvector:
    image: pgvector/pgvector:pg15
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=vector_db
    ports:
      - "5435:5432"
    volumes:
      - pgvector_data:/var/lib/postgresql/data
      - ./storage:/app/storage
    networks:
      - rag-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d vector_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  neo4j:
    image: neo4j:5.12
    environment:
      - NEO4J_AUTH=${NEO4J_AUTH}
      - NEO4J_PLUGINS=["apoc", "graph-data-science"]
    ports:
      - "${NEO4J_HTTP_PORT}:7474"
      - "${NEO4J_PORT}:7687"
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - ./storage:/app/storage
    networks:
      - rag-network
    healthcheck:
      test: ["CMD-SHELL", "cypher-shell -u neo4j -p neo4j_password 'RETURN 1'"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  rag-network:
    driver: bridge

volumes:
  postgres_data:
  pgvector_data:
  neo4j_data:
  neo4j_logs:
