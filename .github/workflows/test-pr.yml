name: Unit Tests CI

# Trigger this workflow when a PR is opened or updated targeting the development branch
on:
  pull_request:
    branches:
      - development

jobs:
  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']

    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Python
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      # Install system dependencies
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client libpq-dev

      # Install backend dependencies
      - name: Install backend dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt

      # Install test dependencies
      - name: Install test dependencies
        run: |
          pip install -r test/requirements.txt

      # Run unit tests with coverage
      - name: Run unit tests
        run: |
          pytest test/unit_tests/ \
            --cov=backend/app \
            --cov-report=term-missing \
            --cov-report=xml:coverage.xml \
            --cov-report=html:test_coverage_report \
            --junitxml=test-results.xml \
            -v

      # Upload coverage to Codecov (optional)
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: matrix.python-version == '3.10'
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      # Upload test results
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            test-results.xml
            test_coverage_report/
            coverage.xml

      # Comment PR with coverage
      - name: Comment PR with coverage
        uses: py-cov-action/python-coverage-comment-action@v3
        if: matrix.python-version == '3.10' && github.event_name == 'pull_request'
        with:
          GITHUB_TOKEN: ${{ github.token }}
          MINIMUM_GREEN: 70
          MINIMUM_ORANGE: 50

      # Check test results
      - name: Check test results
        if: always()
        run: |
          echo "Test execution completed"
          echo "Check the test results and coverage report in the artifacts"

  lint:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy

      - name: Run flake8
        continue-on-error: true
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 backend/app --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          flake8 backend/app --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Check code formatting with black
        continue-on-error: true
        run: |
          black --check backend/app

      - name: Check import sorting with isort
        continue-on-error: true
        run: |
          isort --check-only backend/app

  summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: always()

    steps:
      - name: Check test status
        run: |
          echo "Unit Tests: ${{ needs.test.result }}"
          echo "Code Quality: ${{ needs.lint.result }}"

          if [ "${{ needs.test.result }}" != "success" ]; then
            echo "⚠️ Unit tests failed or were skipped"
            exit 1
          fi

          echo "✅ All checks passed!"
